// <auto-generated />
using System;
using BuildQuote.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BuildQuote.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211107105542_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.HasSequence<int>("QuoteNumber", "Quotes")
                .StartsAt(1000L);

            modelBuilder.Entity("BuildQuote.Models.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = "cf0082a9-59e9-4dfd-8608-53bc9e89caca",
                            Name = "Service"
                        },
                        new
                        {
                            CategoryId = "88501ef1-03a9-49dd-b980-c974ae55c5c7",
                            Name = "Kitchen"
                        },
                        new
                        {
                            CategoryId = "bc76167f-4be2-42e1-b49e-d2a085d6567f",
                            Name = "Bathroom"
                        },
                        new
                        {
                            CategoryId = "318a96db-aefb-4a7a-a1cc-01165cd1fc72",
                            Name = "Garden"
                        },
                        new
                        {
                            CategoryId = "66dc555b-af11-42a0-88f2-946ccd0fae62",
                            Name = "Materials"
                        },
                        new
                        {
                            CategoryId = "4fd6f1cd-1d78-46e9-b4f0-d216c97d5a2d",
                            Name = "Doors"
                        },
                        new
                        {
                            CategoryId = "af873980-3606-4106-9945-196bc1c62d65",
                            Name = "Windows"
                        },
                        new
                        {
                            CategoryId = "4d6b4168-4e6c-458c-9e74-9ee75572a886",
                            Name = "Floorings"
                        },
                        new
                        {
                            CategoryId = "463b697b-e3ca-4d5d-b653-d144219addd4",
                            Name = "Tiles"
                        },
                        new
                        {
                            CategoryId = "ffce44ee-6f09-492a-9c37-2d1372505f4f",
                            Name = "Paint"
                        },
                        new
                        {
                            CategoryId = "c0642503-84ea-426e-b526-3fa2998b10d9",
                            Name = "Electricals"
                        },
                        new
                        {
                            CategoryId = "1d5b0802-da1b-43e1-b71d-76fc850ef0b4",
                            Name = "Nails, Screws & Adhesives"
                        },
                        new
                        {
                            CategoryId = "97299015-e0f9-4524-82b9-44a05a41f8c8",
                            Name = "Timber"
                        },
                        new
                        {
                            CategoryId = "390e9c67-d500-49a9-8abe-c522ac9cbf60",
                            Name = "Heating & Plumbing"
                        });
                });

            modelBuilder.Entity("BuildQuote.Models.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = "c200c661-5ccb-4944-8cc1-f6158700349b",
                            AddressLine1 = "123 Real Street",
                            City = "Genuineville",
                            Email = "kaz.tomer@email.com",
                            FirstName = "Kaz",
                            LastName = "Tomer",
                            Phone = "07987654321",
                            PostCode = "GN1 2AB"
                        });
                });

            modelBuilder.Entity("BuildQuote.Models.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeLastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.Property<float>("VatRate")
                        .HasColumnType("real");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = "0eb965dd-a7d0-48fc-b4d8-ad8ee2e81e43",
                            CategoryId = "ffce44ee-6f09-492a-9c37-2d1372505f4f",
                            Name = "Red Paint (2.5L)",
                            TimeCreated = new DateTime(2021, 11, 7, 10, 55, 42, 159, DateTimeKind.Utc).AddTicks(2791),
                            TimeLastUpdated = new DateTime(2021, 11, 7, 10, 55, 42, 159, DateTimeKind.Utc).AddTicks(2791),
                            UnitPrice = 12f,
                            VatRate = 20f
                        },
                        new
                        {
                            ProductId = "e3d4aa3f-16b2-46bb-9865-d5c20a31029c",
                            CategoryId = "ffce44ee-6f09-492a-9c37-2d1372505f4f",
                            Name = "Blue Paint (2.5L)",
                            TimeCreated = new DateTime(2021, 11, 7, 10, 55, 42, 159, DateTimeKind.Utc).AddTicks(2791),
                            TimeLastUpdated = new DateTime(2021, 11, 7, 10, 55, 42, 159, DateTimeKind.Utc).AddTicks(2791),
                            UnitPrice = 12f,
                            VatRate = 20f
                        },
                        new
                        {
                            ProductId = "a13e03bf-b2eb-4fed-b09c-bddfb1438fe1",
                            CategoryId = "ffce44ee-6f09-492a-9c37-2d1372505f4f",
                            Name = "Green Paint (2.5L)",
                            TimeCreated = new DateTime(2021, 11, 7, 10, 55, 42, 159, DateTimeKind.Utc).AddTicks(2791),
                            TimeLastUpdated = new DateTime(2021, 11, 7, 10, 55, 42, 159, DateTimeKind.Utc).AddTicks(2791),
                            UnitPrice = 12f,
                            VatRate = 20f
                        });
                });

            modelBuilder.Entity("BuildQuote.Models.Provider", b =>
                {
                    b.Property<string>("ProviderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReceiveReports")
                        .HasColumnType("bit");

                    b.HasKey("ProviderId");

                    b.ToTable("Providers");

                    b.HasData(
                        new
                        {
                            ProviderId = "a56583c3-0391-4bba-bf91-b1f0f0ace6ca",
                            Email = "bill.durr@builders.co.uk",
                            FirstName = "Bill",
                            LastName = "Durr",
                            Phone = "07123456789",
                            ReceiveReports = false
                        });
                });

            modelBuilder.Entity("BuildQuote.Models.Quote", b =>
                {
                    b.Property<string>("QuoteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("GrandTotal")
                        .HasColumnType("real");

                    b.Property<float>("NetPrice")
                        .HasColumnType("real");

                    b.Property<string>("ProviderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("QuoteNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR Quotes.QuoteNumber");

                    b.Property<DateTime?>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeEmailed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeLastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<float>("TotalVat")
                        .HasColumnType("real");

                    b.HasKey("QuoteId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Quotes");

                    b.HasData(
                        new
                        {
                            QuoteId = "65628bed-e53d-48ed-866c-562dcb97d7dd",
                            CustomerId = "c200c661-5ccb-4944-8cc1-f6158700349b",
                            GrandTotal = 86.4f,
                            NetPrice = 72f,
                            ProviderId = "a56583c3-0391-4bba-bf91-b1f0f0ace6ca",
                            TimeCreated = new DateTime(2021, 11, 7, 10, 55, 42, 159, DateTimeKind.Utc).AddTicks(2791),
                            TimeLastUpdated = new DateTime(2021, 11, 7, 10, 55, 42, 159, DateTimeKind.Utc).AddTicks(2791),
                            TotalVat = 14.4f
                        });
                });

            modelBuilder.Entity("BuildQuote.Models.QuoteProduct", b =>
                {
                    b.Property<string>("QuoteProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("QuoteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("TimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.Property<float>("VatRate")
                        .HasColumnType("real");

                    b.HasKey("QuoteProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("QuoteId");

                    b.ToTable("QuoteProducts");

                    b.HasData(
                        new
                        {
                            QuoteProductId = "9eaa1705-2513-441c-a5ac-beef42c4d5df",
                            CategoryId = "ffce44ee-6f09-492a-9c37-2d1372505f4f",
                            Name = "Red Paint (2.5L)",
                            ProductId = "0eb965dd-a7d0-48fc-b4d8-ad8ee2e81e43",
                            Quantity = 2,
                            QuoteId = "65628bed-e53d-48ed-866c-562dcb97d7dd",
                            TimeUpdated = new DateTime(2021, 11, 7, 10, 55, 42, 159, DateTimeKind.Utc).AddTicks(2791),
                            UnitPrice = 12f,
                            VatRate = 20f
                        },
                        new
                        {
                            QuoteProductId = "f4974c5c-70de-41ac-b964-54caafadbf4c",
                            CategoryId = "ffce44ee-6f09-492a-9c37-2d1372505f4f",
                            Name = "Green Paint (2.5L)",
                            ProductId = "a13e03bf-b2eb-4fed-b09c-bddfb1438fe1",
                            Quantity = 1,
                            QuoteId = "65628bed-e53d-48ed-866c-562dcb97d7dd",
                            TimeUpdated = new DateTime(2021, 11, 7, 10, 55, 42, 159, DateTimeKind.Utc).AddTicks(2791),
                            UnitPrice = 12f,
                            VatRate = 20f
                        },
                        new
                        {
                            QuoteProductId = "6921933f-abfc-4d15-a166-fff9b18b5121",
                            CategoryId = "ffce44ee-6f09-492a-9c37-2d1372505f4f",
                            Name = "Blue Paint (2.5L)",
                            ProductId = "e3d4aa3f-16b2-46bb-9865-d5c20a31029c",
                            Quantity = 3,
                            QuoteId = "65628bed-e53d-48ed-866c-562dcb97d7dd",
                            TimeUpdated = new DateTime(2021, 11, 7, 10, 55, 42, 159, DateTimeKind.Utc).AddTicks(2791),
                            UnitPrice = 12f,
                            VatRate = 20f
                        });
                });

            modelBuilder.Entity("BuildQuote.Models.Report", b =>
                {
                    b.Property<string>("ReportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("GrandTotal")
                        .HasColumnType("real");

                    b.Property<float>("NetTotal")
                        .HasColumnType("real");

                    b.Property<int>("QuotesCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("TotalVat")
                        .HasColumnType("real");

                    b.HasKey("ReportId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("BuildQuote.Models.ReportQuote", b =>
                {
                    b.Property<string>("ReportQuoteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("GrandTotal")
                        .HasColumnType("real");

                    b.Property<float>("NetPrice")
                        .HasColumnType("real");

                    b.Property<string>("ProviderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuoteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("QuoteNumber")
                        .HasColumnType("int");

                    b.Property<string>("ReportId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("TotalVat")
                        .HasColumnType("real");

                    b.HasKey("ReportQuoteId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("QuoteId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportQuotes");
                });

            modelBuilder.Entity("BuildQuote.Models.Product", b =>
                {
                    b.HasOne("BuildQuote.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BuildQuote.Models.Quote", b =>
                {
                    b.HasOne("BuildQuote.Models.Customer", "Customer")
                        .WithMany("Quotes")
                        .HasForeignKey("CustomerId");

                    b.HasOne("BuildQuote.Models.Provider", "Provider")
                        .WithMany("Quotes")
                        .HasForeignKey("ProviderId");

                    b.Navigation("Customer");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("BuildQuote.Models.QuoteProduct", b =>
                {
                    b.HasOne("BuildQuote.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("BuildQuote.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("BuildQuote.Models.Quote", "Quote")
                        .WithMany("QuoteProducts")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("BuildQuote.Models.ReportQuote", b =>
                {
                    b.HasOne("BuildQuote.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId");

                    b.HasOne("BuildQuote.Models.Quote", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuildQuote.Models.Report", "Report")
                        .WithMany("Quotes")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("Quote");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("BuildQuote.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BuildQuote.Models.Customer", b =>
                {
                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("BuildQuote.Models.Provider", b =>
                {
                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("BuildQuote.Models.Quote", b =>
                {
                    b.Navigation("QuoteProducts");
                });

            modelBuilder.Entity("BuildQuote.Models.Report", b =>
                {
                    b.Navigation("Quotes");
                });
#pragma warning restore 612, 618
        }
    }
}
